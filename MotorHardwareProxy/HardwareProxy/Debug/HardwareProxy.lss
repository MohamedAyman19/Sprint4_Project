
HardwareProxy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ed  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a80  00000000  00000000  00002319  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d42  00000000  00000000  00002d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00003adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a1  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c5b  00000000  00000000  000044f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  74:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DC_MotorInit>:
*  Author: Ayman
*/

#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(STR_Motor_t* Motor)
{
  7c:	ff 92       	push	r15
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	if(NULL_PTR==Motor)
  86:	00 97       	sbiw	r24, 0x00	; 0
  88:	c9 f0       	breq	.+50     	; 0xbc <DC_MotorInit+0x40>
  8a:	ec 01       	movw	r28, r24
		return E_NOK;
	}
	else
	{

			configs.port = Motor->Motor_Forwardport;
  8c:	88 81       	ld	r24, Y
  8e:	00 e6       	ldi	r16, 0x60	; 96
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	f8 01       	movw	r30, r16
  94:	80 83       	st	Z, r24
			configs.pin = Motor->Motor_ForwardPin;
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = OUTPUT;
  9a:	ff 24       	eor	r15, r15
  9c:	f3 94       	inc	r15
  9e:	f2 82       	std	Z+2, r15	; 0x02
			DIO_Init(&configs);
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_Init>
			configs.port = Motor->Motor_Backwardport;
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	f8 01       	movw	r30, r16
  aa:	80 83       	st	Z, r24
			configs.pin = Motor->Motor_BackwardPin;
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = OUTPUT;
  b0:	f2 82       	std	Z+2, r15	; 0x02
			DIO_Init(&configs);
  b2:	c8 01       	movw	r24, r16
  b4:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_Init>

		}
	
	return E_OK;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <DC_MotorInit+0x42>
#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(STR_Motor_t* Motor)
{
	if(NULL_PTR==Motor)
	{
		return E_NOK;
  bc:	80 e0       	ldi	r24, 0x00	; 0
			DIO_Init(&configs);

		}
	
	return E_OK;
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	1f 91       	pop	r17
  c4:	0f 91       	pop	r16
  c6:	ff 90       	pop	r15
  c8:	08 95       	ret

000000ca <DC_MotorStart>:
Motor_ERROR_state_t DC_MotorStart(STR_Motor_t* Motor)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
	
	if(NULL_PTR==Motor)
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	11 f1       	breq	.+68     	; 0x116 <DC_MotorStart+0x4c>
  d2:	ec 01       	movw	r28, r24
	{
		return E_NOK;
	}
	else
	{
		switch ((Motor->Motor_Direction))
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	88 23       	and	r24, r24
  d8:	19 f0       	breq	.+6      	; 0xe0 <DC_MotorStart+0x16>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	61 f0       	breq	.+24     	; 0xf6 <DC_MotorStart+0x2c>
  de:	15 c0       	rjmp	.+42     	; 0x10a <DC_MotorStart+0x40>
		{
			case MOTOR_FORWARD:
			DIO_WritePIN(Motor->Motor_Backwardport, Motor->Motor_BackwardPin, LOW);
  e0:	6b 81       	ldd	r22, Y+3	; 0x03
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_WritePIN>
			DIO_WritePIN(Motor->Motor_Forwardport, Motor->Motor_ForwardPin, HIGH);
  ea:	69 81       	ldd	r22, Y+1	; 0x01
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	88 81       	ld	r24, Y
  f0:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_WritePIN>
				
			break;
  f4:	0a c0       	rjmp	.+20     	; 0x10a <DC_MotorStart+0x40>
			case MOTOR_BACKWARD:
			DIO_WritePIN(Motor->Motor_Forwardport, Motor->Motor_ForwardPin, LOW);
  f6:	69 81       	ldd	r22, Y+1	; 0x01
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	88 81       	ld	r24, Y
  fc:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_WritePIN>
			DIO_WritePIN(Motor->Motor_Backwardport, Motor->Motor_BackwardPin, HIGH);
 100:	6b 81       	ldd	r22, Y+3	; 0x03
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_WritePIN>
			break;
		}
		PWM_START(PWM_TIMER0, Motor->Motor_Speed);
 10a:	6d 81       	ldd	r22, Y+5	; 0x05
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 18 03 	call	0x630	; 0x630 <PWM_START>
		//ENABLE MOTOR RIGHT PWM REQUIRED SPEED
	}
	return E_OK;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	01 c0       	rjmp	.+2      	; 0x118 <DC_MotorStart+0x4e>
Motor_ERROR_state_t DC_MotorStart(STR_Motor_t* Motor)
{
	
	if(NULL_PTR==Motor)
	{
		return E_NOK;
 116:	80 e0       	ldi	r24, 0x00	; 0
		}
		PWM_START(PWM_TIMER0, Motor->Motor_Speed);
		//ENABLE MOTOR RIGHT PWM REQUIRED SPEED
	}
	return E_OK;
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <MotorProxy_unmarshall>:
		STR_Motor_t MotorData;
	 	MotorProxy_unmarshall(MotorProxy,&MotorData);
		(*Motor_Direction)=(MotorData.Motor_Direction);
		(*Motor_Speed)=(MotorData.Motor_Speed);
	}
}
 11e:	fc 01       	movw	r30, r24
 120:	db 01       	movw	r26, r22
 122:	89 2b       	or	r24, r25
 124:	09 f4       	brne	.+2      	; 0x128 <MotorProxy_unmarshall+0xa>
 126:	48 c0       	rjmp	.+144    	; 0x1b8 <MotorProxy_unmarshall+0x9a>
 128:	10 97       	sbiw	r26, 0x00	; 0
 12a:	09 f4       	brne	.+2      	; 0x12e <MotorProxy_unmarshall+0x10>
 12c:	45 c0       	rjmp	.+138    	; 0x1b8 <MotorProxy_unmarshall+0x9a>
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	8b 33       	cpi	r24, 0x3B	; 59
 134:	91 05       	cpc	r25, r1
 136:	11 f4       	brne	.+4      	; 0x13c <MotorProxy_unmarshall+0x1e>
 138:	1c 92       	st	X, r1
 13a:	10 c0       	rjmp	.+32     	; 0x15c <MotorProxy_unmarshall+0x3e>
 13c:	88 33       	cpi	r24, 0x38	; 56
 13e:	91 05       	cpc	r25, r1
 140:	19 f4       	brne	.+6      	; 0x148 <MotorProxy_unmarshall+0x2a>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	8c 93       	st	X, r24
 146:	0a c0       	rjmp	.+20     	; 0x15c <MotorProxy_unmarshall+0x3e>
 148:	85 33       	cpi	r24, 0x35	; 53
 14a:	91 05       	cpc	r25, r1
 14c:	19 f4       	brne	.+6      	; 0x154 <MotorProxy_unmarshall+0x36>
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8c 93       	st	X, r24
 152:	04 c0       	rjmp	.+8      	; 0x15c <MotorProxy_unmarshall+0x3e>
 154:	c2 97       	sbiw	r24, 0x32	; 50
 156:	11 f4       	brne	.+4      	; 0x15c <MotorProxy_unmarshall+0x3e>
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	8c 93       	st	X, r24
 15c:	82 81       	ldd	r24, Z+2	; 0x02
 15e:	93 81       	ldd	r25, Z+3	; 0x03
 160:	8b 33       	cpi	r24, 0x3B	; 59
 162:	91 05       	cpc	r25, r1
 164:	21 f4       	brne	.+8      	; 0x16e <MotorProxy_unmarshall+0x50>
 166:	12 96       	adiw	r26, 0x02	; 2
 168:	1c 92       	st	X, r1
 16a:	12 97       	sbiw	r26, 0x02	; 2
 16c:	16 c0       	rjmp	.+44     	; 0x19a <MotorProxy_unmarshall+0x7c>
 16e:	88 33       	cpi	r24, 0x38	; 56
 170:	91 05       	cpc	r25, r1
 172:	29 f4       	brne	.+10     	; 0x17e <MotorProxy_unmarshall+0x60>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	12 96       	adiw	r26, 0x02	; 2
 178:	8c 93       	st	X, r24
 17a:	12 97       	sbiw	r26, 0x02	; 2
 17c:	0e c0       	rjmp	.+28     	; 0x19a <MotorProxy_unmarshall+0x7c>
 17e:	85 33       	cpi	r24, 0x35	; 53
 180:	91 05       	cpc	r25, r1
 182:	29 f4       	brne	.+10     	; 0x18e <MotorProxy_unmarshall+0x70>
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	12 96       	adiw	r26, 0x02	; 2
 188:	8c 93       	st	X, r24
 18a:	12 97       	sbiw	r26, 0x02	; 2
 18c:	06 c0       	rjmp	.+12     	; 0x19a <MotorProxy_unmarshall+0x7c>
 18e:	c2 97       	sbiw	r24, 0x32	; 50
 190:	21 f4       	brne	.+8      	; 0x19a <MotorProxy_unmarshall+0x7c>
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	12 96       	adiw	r26, 0x02	; 2
 196:	8c 93       	st	X, r24
 198:	12 97       	sbiw	r26, 0x02	; 2
 19a:	84 81       	ldd	r24, Z+4	; 0x04
 19c:	11 96       	adiw	r26, 0x01	; 1
 19e:	8c 93       	st	X, r24
 1a0:	11 97       	sbiw	r26, 0x01	; 1
 1a2:	85 81       	ldd	r24, Z+5	; 0x05
 1a4:	13 96       	adiw	r26, 0x03	; 3
 1a6:	8c 93       	st	X, r24
 1a8:	13 97       	sbiw	r26, 0x03	; 3
 1aa:	87 81       	ldd	r24, Z+7	; 0x07
 1ac:	15 96       	adiw	r26, 0x05	; 5
 1ae:	8c 93       	st	X, r24
 1b0:	15 97       	sbiw	r26, 0x05	; 5
 1b2:	86 81       	ldd	r24, Z+6	; 0x06
 1b4:	14 96       	adiw	r26, 0x04	; 4
 1b6:	8c 93       	st	X, r24
 1b8:	08 95       	ret

000001ba <MotorProxy_marshall>:
 1ba:	dc 01       	movw	r26, r24
 1bc:	fb 01       	movw	r30, r22
 1be:	89 2b       	or	r24, r25
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <MotorProxy_marshall+0xa>
 1c2:	56 c0       	rjmp	.+172    	; 0x270 <MotorProxy_marshall+0xb6>
 1c4:	30 97       	sbiw	r30, 0x00	; 0
 1c6:	09 f4       	brne	.+2      	; 0x1ca <MotorProxy_marshall+0x10>
 1c8:	53 c0       	rjmp	.+166    	; 0x270 <MotorProxy_marshall+0xb6>
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <MotorProxy_marshall+0x22>
 1d0:	8b e3       	ldi	r24, 0x3B	; 59
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	11 96       	adiw	r26, 0x01	; 1
 1d6:	9c 93       	st	X, r25
 1d8:	8e 93       	st	-X, r24
 1da:	17 c0       	rjmp	.+46     	; 0x20a <MotorProxy_marshall+0x50>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	31 f4       	brne	.+12     	; 0x1ec <MotorProxy_marshall+0x32>
 1e0:	88 e3       	ldi	r24, 0x38	; 56
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	11 96       	adiw	r26, 0x01	; 1
 1e6:	9c 93       	st	X, r25
 1e8:	8e 93       	st	-X, r24
 1ea:	0f c0       	rjmp	.+30     	; 0x20a <MotorProxy_marshall+0x50>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	31 f4       	brne	.+12     	; 0x1fc <MotorProxy_marshall+0x42>
 1f0:	85 e3       	ldi	r24, 0x35	; 53
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	11 96       	adiw	r26, 0x01	; 1
 1f6:	9c 93       	st	X, r25
 1f8:	8e 93       	st	-X, r24
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <MotorProxy_marshall+0x50>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	29 f4       	brne	.+10     	; 0x20a <MotorProxy_marshall+0x50>
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	11 96       	adiw	r26, 0x01	; 1
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	82 81       	ldd	r24, Z+2	; 0x02
 20c:	81 11       	cpse	r24, r1
 20e:	07 c0       	rjmp	.+14     	; 0x21e <MotorProxy_marshall+0x64>
 210:	8b e3       	ldi	r24, 0x3B	; 59
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
 21c:	1a c0       	rjmp	.+52     	; 0x252 <MotorProxy_marshall+0x98>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	39 f4       	brne	.+14     	; 0x230 <MotorProxy_marshall+0x76>
 222:	88 e3       	ldi	r24, 0x38	; 56
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	13 96       	adiw	r26, 0x03	; 3
 228:	9c 93       	st	X, r25
 22a:	8e 93       	st	-X, r24
 22c:	12 97       	sbiw	r26, 0x02	; 2
 22e:	11 c0       	rjmp	.+34     	; 0x252 <MotorProxy_marshall+0x98>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	39 f4       	brne	.+14     	; 0x242 <MotorProxy_marshall+0x88>
 234:	85 e3       	ldi	r24, 0x35	; 53
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	13 96       	adiw	r26, 0x03	; 3
 23a:	9c 93       	st	X, r25
 23c:	8e 93       	st	-X, r24
 23e:	12 97       	sbiw	r26, 0x02	; 2
 240:	08 c0       	rjmp	.+16     	; 0x252 <MotorProxy_marshall+0x98>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	31 f4       	brne	.+12     	; 0x252 <MotorProxy_marshall+0x98>
 246:	82 e3       	ldi	r24, 0x32	; 50
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	13 96       	adiw	r26, 0x03	; 3
 24c:	9c 93       	st	X, r25
 24e:	8e 93       	st	-X, r24
 250:	12 97       	sbiw	r26, 0x02	; 2
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	14 96       	adiw	r26, 0x04	; 4
 256:	8c 93       	st	X, r24
 258:	14 97       	sbiw	r26, 0x04	; 4
 25a:	83 81       	ldd	r24, Z+3	; 0x03
 25c:	15 96       	adiw	r26, 0x05	; 5
 25e:	8c 93       	st	X, r24
 260:	15 97       	sbiw	r26, 0x05	; 5
 262:	85 81       	ldd	r24, Z+5	; 0x05
 264:	17 96       	adiw	r26, 0x07	; 7
 266:	8c 93       	st	X, r24
 268:	17 97       	sbiw	r26, 0x07	; 7
 26a:	84 81       	ldd	r24, Z+4	; 0x04
 26c:	16 96       	adiw	r26, 0x06	; 6
 26e:	8c 93       	st	X, r24
 270:	08 95       	ret

00000272 <MotorProxy_initialize>:
 272:	fc 01       	movw	r30, r24
 274:	89 2b       	or	r24, r25
 276:	41 f0       	breq	.+16     	; 0x288 <MotorProxy_initialize+0x16>
 278:	13 82       	std	Z+3, r1	; 0x03
 27a:	12 82       	std	Z+2, r1	; 0x02
 27c:	11 82       	std	Z+1, r1	; 0x01
 27e:	10 82       	st	Z, r1
 280:	14 82       	std	Z+4, r1	; 0x04
 282:	15 82       	std	Z+5, r1	; 0x05
 284:	16 82       	std	Z+6, r1	; 0x06
 286:	17 82       	std	Z+7, r1	; 0x07
 288:	08 95       	ret

0000028a <MotorProxy_configue>:
 28a:	0f 93       	push	r16
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	00 d0       	rcall	.+0      	; 0x292 <MotorProxy_configue+0x8>
 292:	00 d0       	rcall	.+0      	; 0x294 <MotorProxy_configue+0xa>
 294:	00 d0       	rcall	.+0      	; 0x296 <MotorProxy_configue+0xc>
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	b1 f0       	breq	.+44     	; 0x2ca <MotorProxy_configue+0x40>
 29e:	61 15       	cp	r22, r1
 2a0:	71 05       	cpc	r23, r1
 2a2:	99 f0       	breq	.+38     	; 0x2ca <MotorProxy_configue+0x40>
 2a4:	41 15       	cp	r20, r1
 2a6:	51 05       	cpc	r21, r1
 2a8:	81 f0       	breq	.+32     	; 0x2ca <MotorProxy_configue+0x40>
 2aa:	fc 01       	movw	r30, r24
 2ac:	71 83       	std	Z+1, r23	; 0x01
 2ae:	60 83       	st	Z, r22
 2b0:	53 83       	std	Z+3, r21	; 0x03
 2b2:	42 83       	std	Z+2, r20	; 0x02
 2b4:	24 83       	std	Z+4, r18	; 0x04
 2b6:	05 83       	std	Z+5, r16	; 0x05
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	0e 94 8f 00 	call	0x11e	; 0x11e <MotorProxy_unmarshall>
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	0e 94 3e 00 	call	0x7c	; 0x7c <DC_MotorInit>
 2ca:	26 96       	adiw	r28, 0x06	; 6
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <MotorProxy_mutate>:
void MotorProxy_mutate(STR_MotorProxy_t* MotorProxy,uint8_t Motor_Direction,uint8_t Motor_Speed)
{
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <MotorProxy_mutate+0xe>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <MotorProxy_mutate+0x10>
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <MotorProxy_mutate+0x12>
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	if(MotorProxy==NULL_PTR)
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	a1 f0       	breq	.+40     	; 0x320 <MotorProxy_mutate+0x42>
 2f8:	f4 2e       	mov	r15, r20
 2fa:	e6 2e       	mov	r14, r22
 2fc:	8c 01       	movw	r16, r24
		return;
	}
	else
	{
		STR_Motor_t MotorData;
		MotorProxy_unmarshall(MotorProxy,&MotorData);
 2fe:	be 01       	movw	r22, r28
 300:	6f 5f       	subi	r22, 0xFF	; 255
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	0e 94 8f 00 	call	0x11e	; 0x11e <MotorProxy_unmarshall>
		MotorData.Motor_Direction=Motor_Direction;
 308:	ed 82       	std	Y+5, r14	; 0x05
		MotorData.Motor_Speed=Motor_Speed;
 30a:	fe 82       	std	Y+6, r15	; 0x06
		MotorProxy_marshall(MotorProxy,&MotorData);
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	c8 01       	movw	r24, r16
 314:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorProxy_marshall>
		DC_MotorStart(&MotorData);
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	0e 94 65 00 	call	0xca	; 0xca <DC_MotorStart>
		
	}
	
}
 320:	26 96       	adiw	r28, 0x06	; 6
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <main>:
#include "HardwareProxy/Motor_HardwareProxy.h"
#include "UTILS/delay.h"


int main(void)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	28 97       	sbiw	r28, 0x08	; 8
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	STR_MotorProxy_t DCmotor;
	MotorProxy_initialize(&DCmotor);
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	0e 94 39 01 	call	0x272	; 0x272 <MotorProxy_initialize>
	MotorProxy_configue(&DCmotor,&PORTA,&PORTA,0,1);
 356:	01 e0       	ldi	r16, 0x01	; 1
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	4b e3       	ldi	r20, 0x3B	; 59
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	6b e3       	ldi	r22, 0x3B	; 59
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	ce 01       	movw	r24, r28
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	0e 94 45 01 	call	0x28a	; 0x28a <MotorProxy_configue>

	
    while (1) 
    {
			MotorProxy_mutate(&DCmotor,MOTOR_FORWARD,30);
 36a:	4e e1       	ldi	r20, 0x1E	; 30
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	0e 94 6f 01 	call	0x2de	; 0x2de <MotorProxy_mutate>
			for(uint32_t i=0;i<500000;i++);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	dc 01       	movw	r26, r24
 37c:	03 c0       	rjmp	.+6      	; 0x384 <main+0x4a>
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	a1 1d       	adc	r26, r1
 382:	b1 1d       	adc	r27, r1
 384:	80 32       	cpi	r24, 0x20	; 32
 386:	21 ea       	ldi	r18, 0xA1	; 161
 388:	92 07       	cpc	r25, r18
 38a:	27 e0       	ldi	r18, 0x07	; 7
 38c:	a2 07       	cpc	r26, r18
 38e:	b1 05       	cpc	r27, r1
 390:	b0 f3       	brcs	.-20     	; 0x37e <main+0x44>
			MotorProxy_mutate(&DCmotor,MOTOR_BACKWARD,30);
 392:	4e e1       	ldi	r20, 0x1E	; 30
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 6f 01 	call	0x2de	; 0x2de <MotorProxy_mutate>
			for(uint32_t i=0;i<500000;i++);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	dc 01       	movw	r26, r24
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <main+0x72>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	a1 1d       	adc	r26, r1
 3aa:	b1 1d       	adc	r27, r1
 3ac:	80 32       	cpi	r24, 0x20	; 32
 3ae:	21 ea       	ldi	r18, 0xA1	; 161
 3b0:	92 07       	cpc	r25, r18
 3b2:	27 e0       	ldi	r18, 0x07	; 7
 3b4:	a2 07       	cpc	r26, r18
 3b6:	b1 05       	cpc	r27, r1
 3b8:	b0 f3       	brcs	.-20     	; 0x3a6 <main+0x6c>
 3ba:	d7 cf       	rjmp	.-82     	; 0x36a <main+0x30>

000003bc <DIO_Init>:

#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
 3bc:	fc 01       	movw	r30, r24
	E_STATUS au8_error=E_NOK;
	if(((configurations->port <= DIO_PORTD)&&(configurations->port >= DIO_PORTA))&&
 3be:	90 81       	ld	r25, Z
 3c0:	94 30       	cpi	r25, 0x04	; 4
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <DIO_Init+0xa>
 3c4:	8e c0       	rjmp	.+284    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
	((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
 3c6:	81 81       	ldd	r24, Z+1	; 0x01


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
	if(((configurations->port <= DIO_PORTD)&&(configurations->port >= DIO_PORTA))&&
 3c8:	88 30       	cpi	r24, 0x08	; 8
 3ca:	08 f0       	brcs	.+2      	; 0x3ce <DIO_Init+0x12>
 3cc:	8c c0       	rjmp	.+280    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
	{
		
		switch(configurations->port)
 3ce:	91 30       	cpi	r25, 0x01	; 1
 3d0:	41 f1       	breq	.+80     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3d2:	38 f0       	brcs	.+14     	; 0x3e2 <DIO_Init+0x26>
 3d4:	92 30       	cpi	r25, 0x02	; 2
 3d6:	09 f4       	brne	.+2      	; 0x3da <DIO_Init+0x1e>
 3d8:	44 c0       	rjmp	.+136    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3da:	93 30       	cpi	r25, 0x03	; 3
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_Init+0x24>
 3de:	61 c0       	rjmp	.+194    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3e0:	84 c0       	rjmp	.+264    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
		{
			case DIO_PORTA:
			{
				if(configurations->dir == OUTPUT)
 3e2:	92 81       	ldd	r25, Z+2	; 0x02
 3e4:	91 30       	cpi	r25, 0x01	; 1
 3e6:	71 f4       	brne	.+28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				{	
					SET_BIT(PORTA_DIR,configurations->pin);
 3e8:	4a b3       	in	r20, 0x1a	; 26
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	b9 01       	movw	r22, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_Init+0x3a>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	8a 95       	dec	r24
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_Init+0x36>
 3fa:	cb 01       	movw	r24, r22
 3fc:	84 2b       	or	r24, r20
 3fe:	8a bb       	out	0x1a, r24	; 26
					au8_error = E_OK;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
				}
				else
				{
					RESET_BIT(PORTA_DIR,configurations->pin);
 404:	4a b3       	in	r20, 0x1a	; 26
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	b9 01       	movw	r22, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	8a 95       	dec	r24
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	cb 01       	movw	r24, r22
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8a bb       	out	0x1a, r24	; 26
#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
				
				break;
			}
			case DIO_PORTB:
			{
				if(configurations->dir == OUTPUT)
 422:	92 81       	ldd	r25, Z+2	; 0x02
 424:	91 30       	cpi	r25, 0x01	; 1
 426:	71 f4       	brne	.+28     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				{
					SET_BIT(PORTB_DIR,configurations->pin);
 428:	47 b3       	in	r20, 0x17	; 23
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	cb 01       	movw	r24, r22
 43c:	84 2b       	or	r24, r20
 43e:	87 bb       	out	0x17, r24	; 23
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
				}
				au8_error = E_OK;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTB_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
 444:	47 b3       	in	r20, 0x17	; 23
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	cb 01       	movw	r24, r22
 458:	80 95       	com	r24
 45a:	84 23       	and	r24, r20
 45c:	87 bb       	out	0x17, r24	; 23
				}
				au8_error = E_OK;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	08 95       	ret
				break;
			}
			case DIO_PORTC:
			{
				if(configurations->dir == OUTPUT)
 462:	92 81       	ldd	r25, Z+2	; 0x02
 464:	91 30       	cpi	r25, 0x01	; 1
 466:	71 f4       	brne	.+28     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
				{
					SET_BIT(PORTC_DIR,configurations->pin);
 468:	44 b3       	in	r20, 0x14	; 20
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	84 bb       	out	0x14, r24	; 20
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
				}
				au8_error = E_OK;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTC_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
 484:	44 b3       	in	r20, 0x14	; 20
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	b9 01       	movw	r22, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	cb 01       	movw	r24, r22
 498:	80 95       	com	r24
 49a:	84 23       	and	r24, r20
 49c:	84 bb       	out	0x14, r24	; 20
				}
				au8_error = E_OK;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	08 95       	ret
				break;
			}
			case DIO_PORTD:
			{
				if(configurations->dir == OUTPUT)
 4a2:	92 81       	ldd	r25, Z+2	; 0x02
 4a4:	91 30       	cpi	r25, 0x01	; 1
 4a6:	71 f4       	brne	.+28     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				{
					SET_BIT(PORTD_DIR,configurations->pin);
 4a8:	41 b3       	in	r20, 0x11	; 17
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	b9 01       	movw	r22, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	8a 95       	dec	r24
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ba:	cb 01       	movw	r24, r22
 4bc:	84 2b       	or	r24, r20
 4be:	81 bb       	out	0x11, r24	; 17
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
				}
				au8_error = E_OK;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTD_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
 4c4:	41 b3       	in	r20, 0x11	; 17
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	cb 01       	movw	r24, r22
 4d8:	80 95       	com	r24
 4da:	84 23       	and	r24, r20
 4dc:	81 bb       	out	0x11, r24	; 17
				}
				au8_error = E_OK;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret
#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	08 95       	ret
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	80 e0       	ldi	r24, 0x00	; 0
			}

		}
	}
	return au8_error;
}
 4ec:	08 95       	ret

000004ee <DIO_WritePIN>:


E_STATUS DIO_WritePIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
 4ee:	84 30       	cpi	r24, 0x04	; 4
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <DIO_WritePIN+0x6>
 4f2:	78 c0       	rjmp	.+240    	; 0x5e4 <DIO_WritePIN+0xf6>
 4f4:	68 30       	cpi	r22, 0x08	; 8
 4f6:	08 f0       	brcs	.+2      	; 0x4fa <DIO_WritePIN+0xc>
 4f8:	77 c0       	rjmp	.+238    	; 0x5e8 <DIO_WritePIN+0xfa>
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
		switch(port)
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	11 f1       	breq	.+68     	; 0x542 <DIO_WritePIN+0x54>
 4fe:	30 f0       	brcs	.+12     	; 0x50c <DIO_WritePIN+0x1e>
 500:	82 30       	cpi	r24, 0x02	; 2
 502:	d1 f1       	breq	.+116    	; 0x578 <DIO_WritePIN+0x8a>
 504:	83 30       	cpi	r24, 0x03	; 3
 506:	09 f4       	brne	.+2      	; 0x50a <DIO_WritePIN+0x1c>
 508:	52 c0       	rjmp	.+164    	; 0x5ae <DIO_WritePIN+0xc0>
 50a:	70 c0       	rjmp	.+224    	; 0x5ec <DIO_WritePIN+0xfe>
		{
			case DIO_PORTA:
			{
				if(data == HIGH)
 50c:	41 30       	cpi	r20, 0x01	; 1
 50e:	61 f4       	brne	.+24     	; 0x528 <DIO_WritePIN+0x3a>
				{
					SET_BIT(PORTA_DATA,pin);
 510:	2b b3       	in	r18, 0x1b	; 27
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_WritePIN+0x2e>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_WritePIN+0x2a>
 520:	82 2b       	or	r24, r18
 522:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTA_DATA,pin);
				}else
				{
					RESET_BIT(PORTA_DATA,pin);
 528:	2b b3       	in	r18, 0x1b	; 27
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_WritePIN+0x46>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_WritePIN+0x42>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret
				}
				break;
			}
			case DIO_PORTB:
			{
				if(data == HIGH)
 542:	41 30       	cpi	r20, 0x01	; 1
 544:	61 f4       	brne	.+24     	; 0x55e <DIO_WritePIN+0x70>
				{
					SET_BIT(PORTB_DATA,pin);
 546:	28 b3       	in	r18, 0x18	; 24
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_WritePIN+0x64>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_WritePIN+0x60>
 556:	82 2b       	or	r24, r18
 558:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTB_DATA,pin);
				}else
				{
					RESET_BIT(PORTB_DATA,pin);
 55e:	28 b3       	in	r18, 0x18	; 24
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_WritePIN+0x7c>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_WritePIN+0x78>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret
				}
				break;
			}
			case DIO_PORTC:
			{
				if(data == HIGH)
 578:	41 30       	cpi	r20, 0x01	; 1
 57a:	61 f4       	brne	.+24     	; 0x594 <DIO_WritePIN+0xa6>
				{
					SET_BIT(PORTC_DATA,pin);
 57c:	25 b3       	in	r18, 0x15	; 21
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_WritePIN+0x9a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_WritePIN+0x96>
 58c:	82 2b       	or	r24, r18
 58e:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTC_DATA,pin);
				}else
				{
					RESET_BIT(PORTC_DATA,pin);
 594:	25 b3       	in	r18, 0x15	; 21
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_WritePIN+0xb2>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_WritePIN+0xae>
 5a4:	80 95       	com	r24
 5a6:	82 23       	and	r24, r18
 5a8:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	08 95       	ret
				}
				break;
			}
			case DIO_PORTD:
			{
				if(data == HIGH)
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	61 f4       	brne	.+24     	; 0x5ca <DIO_WritePIN+0xdc>
				{
					SET_BIT(PORTD_DATA,pin);
 5b2:	22 b3       	in	r18, 0x12	; 18
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_WritePIN+0xd0>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_WritePIN+0xcc>
 5c2:	82 2b       	or	r24, r18
 5c4:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTD_DATA,pin);
				}else
				{
					RESET_BIT(PORTD_DATA,pin);
 5ca:	22 b3       	in	r18, 0x12	; 18
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_WritePIN+0xe8>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_WritePIN+0xe4>
 5da:	80 95       	com	r24
 5dc:	82 23       	and	r24, r18
 5de:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	08 95       	ret
}


E_STATUS DIO_WritePIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_NOK;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	08 95       	ret
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	return au8_error;
}
 5ee:	08 95       	ret

000005f0 <PWM_InitPins>:
/******************************************************************************
*                         LOCAL FUNCTIONS									  *
*******************************************************************************/
uint8_t PWM_InitPins(PWM_TIMER TimerNo)
{
	switch (TimerNo)
 5f0:	88 23       	and	r24, r24
 5f2:	19 f0       	breq	.+6      	; 0x5fa <PWM_InitPins+0xa>
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	69 f0       	breq	.+26     	; 0x612 <PWM_InitPins+0x22>
 5f8:	19 c0       	rjmp	.+50     	; 0x62c <PWM_InitPins+0x3c>
	{
		{
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
 5fa:	e0 e6       	ldi	r30, 0x60	; 96
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 83       	st	Z, r24
			configs.pin = PIN_3;
 602:	93 e0       	ldi	r25, 0x03	; 3
 604:	91 83       	std	Z+1, r25	; 0x01
			configs.dir = OUTPUT;
 606:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
 608:	cf 01       	movw	r24, r30
 60a:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
 60e:	81 e0       	ldi	r24, 0x01	; 1
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
			configs.pin = PIN_3;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
 610:	08 95       	ret
		}
		case  PWM_TIMER2:
		{
			configs.port = DIO_PORTD;
 612:	e0 e6       	ldi	r30, 0x60	; 96
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	80 83       	st	Z, r24
			configs.pin = PIN_7;
 61a:	87 e0       	ldi	r24, 0x07	; 7
 61c:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = OUTPUT;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
 622:	cf 01       	movw	r24, r30
 624:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
 628:	81 e0       	ldi	r24, 0x01	; 1
		{
			configs.port = DIO_PORTD;
			configs.pin = PIN_7;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
 62a:	08 95       	ret
		}
		default:
		{
			return E_NOK;
 62c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return E_OK;
}
 62e:	08 95       	ret

00000630 <PWM_START>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
 630:	cf 93       	push	r28
	if (dutyCycle > 100)
 632:	65 36       	cpi	r22, 0x65	; 101
 634:	08 f0       	brcs	.+2      	; 0x638 <PWM_START+0x8>
 636:	4e c0       	rjmp	.+156    	; 0x6d4 <PWM_START+0xa4>
 638:	c8 2f       	mov	r28, r24
	{
		return E_NOK;
	}
	else
	{
		if (TimerNo == PWM_TIMER0)
 63a:	81 11       	cpse	r24, r1
 63c:	22 c0       	rjmp	.+68     	; 0x682 <PWM_START+0x52>
		{
			TCCR0 |= PWM_TIMER0_MODE;
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	88 64       	ori	r24, 0x48	; 72
 642:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_PRESCALER;
 644:	83 b7       	in	r24, 0x33	; 51
 646:	81 60       	ori	r24, 0x01	; 1
 648:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_OC0_MODE;
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	80 62       	ori	r24, 0x20	; 32
 64e:	83 bf       	out	0x33, r24	; 51
			if (PWM_TIMER0_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
			{
				if (dutyCycle == 0)
 650:	61 11       	cpse	r22, r1
 652:	02 c0       	rjmp	.+4      	; 0x658 <PWM_START+0x28>
				{
					OCR0 = 0;
 654:	1c be       	out	0x3c, r1	; 60
 656:	38 c0       	rjmp	.+112    	; 0x6c8 <PWM_START+0x98>
				}
				else
				{
					OCR0 = 2.56 * dutyCycle - 1;
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 662:	2a e0       	ldi	r18, 0x0A	; 10
 664:	37 ed       	ldi	r19, 0xD7	; 215
 666:	43 e2       	ldi	r20, 0x23	; 35
 668:	50 e4       	ldi	r21, 0x40	; 64
 66a:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
 66e:	20 e0       	ldi	r18, 0x00	; 0
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	40 e8       	ldi	r20, 0x80	; 128
 674:	5f e3       	ldi	r21, 0x3F	; 63
 676:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
 67a:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fixunssfsi>
 67e:	6c bf       	out	0x3c, r22	; 60
 680:	23 c0       	rjmp	.+70     	; 0x6c8 <PWM_START+0x98>
				{
					OCR0 = 255 - 2.56 * dutyCycle;
				}
			}
		}
		else if (TimerNo == PWM_TIMER2)
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	49 f5       	brne	.+82     	; 0x6d8 <PWM_START+0xa8>
		{
			TCCR2 |= PWM_TIMER2_MODE;
 686:	85 b5       	in	r24, 0x25	; 37
 688:	88 64       	ori	r24, 0x48	; 72
 68a:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_PRESCALER;
 68c:	85 b5       	in	r24, 0x25	; 37
 68e:	81 60       	ori	r24, 0x01	; 1
 690:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_OC0_MODE;
 692:	85 b5       	in	r24, 0x25	; 37
 694:	80 62       	ori	r24, 0x20	; 32
 696:	85 bd       	out	0x25, r24	; 37
			if (PWM_TIMER2_MODE == PWM_MODE_FASTPWM)
			{
				if (PWM_TIMER2_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
				{
					if (dutyCycle == 0)
 698:	61 11       	cpse	r22, r1
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <PWM_START+0x70>
					{
						OCR2 = 0;
 69c:	13 bc       	out	0x23, r1	; 35
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <PWM_START+0x98>
					}
					else
					{
						OCR2 = 2.56 * dutyCycle - 1;
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 6aa:	2a e0       	ldi	r18, 0x0A	; 10
 6ac:	37 ed       	ldi	r19, 0xD7	; 215
 6ae:	43 e2       	ldi	r20, 0x23	; 35
 6b0:	50 e4       	ldi	r21, 0x40	; 64
 6b2:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 e8       	ldi	r20, 0x80	; 128
 6bc:	5f e3       	ldi	r21, 0x3F	; 63
 6be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
 6c2:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fixunssfsi>
 6c6:	63 bd       	out	0x23, r22	; 35
		{
			return E_NOK;
		}
	}

	if (E_NOK == PWM_InitPins(TimerNo))
 6c8:	8c 2f       	mov	r24, r28
 6ca:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <PWM_InitPins>
 6ce:	81 11       	cpse	r24, r1
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <PWM_START+0xac>
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <PWM_START+0xae>

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
	if (dutyCycle > 100)
	{
		return E_NOK;
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <PWM_START+0xae>
				}
			}
		}
		else
		{
			return E_NOK;
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	01 c0       	rjmp	.+2      	; 0x6de <PWM_START+0xae>
	}
	else
	{
		
	}
	return E_OK;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
}
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <__subsf3>:
 6e2:	50 58       	subi	r21, 0x80	; 128

000006e4 <__addsf3>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3x>
 6ec:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_round>
 6f0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__addsf3+0x20>
 6f6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__addsf3+0x20>
 6fc:	39 f4       	brne	.+14     	; 0x70c <__addsf3+0x28>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	19 f4       	brne	.+6      	; 0x708 <__addsf3+0x24>
 702:	26 f4       	brtc	.+8      	; 0x70c <__addsf3+0x28>
 704:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_nan>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3+0x28>
 70a:	e0 95       	com	r30
 70c:	e7 fb       	bst	r30, 7
 70e:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>

00000712 <__addsf3x>:
 712:	e9 2f       	mov	r30, r25
 714:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_split3>
 718:	58 f3       	brcs	.-42     	; 0x6f0 <__addsf3+0xc>
 71a:	ba 17       	cp	r27, r26
 71c:	62 07       	cpc	r22, r18
 71e:	73 07       	cpc	r23, r19
 720:	84 07       	cpc	r24, r20
 722:	95 07       	cpc	r25, r21
 724:	20 f0       	brcs	.+8      	; 0x72e <__addsf3x+0x1c>
 726:	79 f4       	brne	.+30     	; 0x746 <__addsf3x+0x34>
 728:	a6 f5       	brtc	.+104    	; 0x792 <__addsf3x+0x80>
 72a:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_zero>
 72e:	0e f4       	brtc	.+2      	; 0x732 <__addsf3x+0x20>
 730:	e0 95       	com	r30
 732:	0b 2e       	mov	r0, r27
 734:	ba 2f       	mov	r27, r26
 736:	a0 2d       	mov	r26, r0
 738:	0b 01       	movw	r0, r22
 73a:	b9 01       	movw	r22, r18
 73c:	90 01       	movw	r18, r0
 73e:	0c 01       	movw	r0, r24
 740:	ca 01       	movw	r24, r20
 742:	a0 01       	movw	r20, r0
 744:	11 24       	eor	r1, r1
 746:	ff 27       	eor	r31, r31
 748:	59 1b       	sub	r21, r25
 74a:	99 f0       	breq	.+38     	; 0x772 <__addsf3x+0x60>
 74c:	59 3f       	cpi	r21, 0xF9	; 249
 74e:	50 f4       	brcc	.+20     	; 0x764 <__addsf3x+0x52>
 750:	50 3e       	cpi	r21, 0xE0	; 224
 752:	68 f1       	brcs	.+90     	; 0x7ae <__addsf3x+0x9c>
 754:	1a 16       	cp	r1, r26
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	a2 2f       	mov	r26, r18
 75a:	23 2f       	mov	r18, r19
 75c:	34 2f       	mov	r19, r20
 75e:	44 27       	eor	r20, r20
 760:	58 5f       	subi	r21, 0xF8	; 248
 762:	f3 cf       	rjmp	.-26     	; 0x74a <__addsf3x+0x38>
 764:	46 95       	lsr	r20
 766:	37 95       	ror	r19
 768:	27 95       	ror	r18
 76a:	a7 95       	ror	r26
 76c:	f0 40       	sbci	r31, 0x00	; 0
 76e:	53 95       	inc	r21
 770:	c9 f7       	brne	.-14     	; 0x764 <__addsf3x+0x52>
 772:	7e f4       	brtc	.+30     	; 0x792 <__addsf3x+0x80>
 774:	1f 16       	cp	r1, r31
 776:	ba 0b       	sbc	r27, r26
 778:	62 0b       	sbc	r22, r18
 77a:	73 0b       	sbc	r23, r19
 77c:	84 0b       	sbc	r24, r20
 77e:	ba f0       	brmi	.+46     	; 0x7ae <__addsf3x+0x9c>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	a1 f0       	breq	.+40     	; 0x7ac <__addsf3x+0x9a>
 784:	ff 0f       	add	r31, r31
 786:	bb 1f       	adc	r27, r27
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	c2 f7       	brpl	.-16     	; 0x780 <__addsf3x+0x6e>
 790:	0e c0       	rjmp	.+28     	; 0x7ae <__addsf3x+0x9c>
 792:	ba 0f       	add	r27, r26
 794:	62 1f       	adc	r22, r18
 796:	73 1f       	adc	r23, r19
 798:	84 1f       	adc	r24, r20
 79a:	48 f4       	brcc	.+18     	; 0x7ae <__addsf3x+0x9c>
 79c:	87 95       	ror	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	9e 3f       	cpi	r25, 0xFE	; 254
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__addsf3x+0x9a>
 7aa:	b0 cf       	rjmp	.-160    	; 0x70c <__addsf3+0x28>
 7ac:	93 95       	inc	r25
 7ae:	88 0f       	add	r24, r24
 7b0:	08 f0       	brcs	.+2      	; 0x7b4 <__addsf3x+0xa2>
 7b2:	99 27       	eor	r25, r25
 7b4:	ee 0f       	add	r30, r30
 7b6:	97 95       	ror	r25
 7b8:	87 95       	ror	r24
 7ba:	08 95       	ret

000007bc <__fixunssfsi>:
 7bc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_splitA>
 7c0:	88 f0       	brcs	.+34     	; 0x7e4 <__fixunssfsi+0x28>
 7c2:	9f 57       	subi	r25, 0x7F	; 127
 7c4:	98 f0       	brcs	.+38     	; 0x7ec <__fixunssfsi+0x30>
 7c6:	b9 2f       	mov	r27, r25
 7c8:	99 27       	eor	r25, r25
 7ca:	b7 51       	subi	r27, 0x17	; 23
 7cc:	b0 f0       	brcs	.+44     	; 0x7fa <__fixunssfsi+0x3e>
 7ce:	e1 f0       	breq	.+56     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7d0:	66 0f       	add	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	1a f0       	brmi	.+6      	; 0x7e0 <__fixunssfsi+0x24>
 7da:	ba 95       	dec	r27
 7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__fixunssfsi+0x14>
 7de:	14 c0       	rjmp	.+40     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e0:	b1 30       	cpi	r27, 0x01	; 1
 7e2:	91 f0       	breq	.+36     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e4:	0e 94 94 04 	call	0x928	; 0x928 <__fp_zero>
 7e8:	b1 e0       	ldi	r27, 0x01	; 1
 7ea:	08 95       	ret
 7ec:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_zero>
 7f0:	67 2f       	mov	r22, r23
 7f2:	78 2f       	mov	r23, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	b8 5f       	subi	r27, 0xF8	; 248
 7f8:	39 f0       	breq	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	b9 3f       	cpi	r27, 0xF9	; 249
 7fc:	cc f3       	brlt	.-14     	; 0x7f0 <__fixunssfsi+0x34>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b3 95       	inc	r27
 806:	d9 f7       	brne	.-10     	; 0x7fe <__fixunssfsi+0x42>
 808:	3e f4       	brtc	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80a:	90 95       	com	r25
 80c:	80 95       	com	r24
 80e:	70 95       	com	r23
 810:	61 95       	neg	r22
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <__floatunsisf>:
 81a:	e8 94       	clt
 81c:	09 c0       	rjmp	.+18     	; 0x830 <__floatsisf+0x12>

0000081e <__floatsisf>:
 81e:	97 fb       	bst	r25, 7
 820:	3e f4       	brtc	.+14     	; 0x830 <__floatsisf+0x12>
 822:	90 95       	com	r25
 824:	80 95       	com	r24
 826:	70 95       	com	r23
 828:	61 95       	neg	r22
 82a:	7f 4f       	sbci	r23, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	99 23       	and	r25, r25
 832:	a9 f0       	breq	.+42     	; 0x85e <__floatsisf+0x40>
 834:	f9 2f       	mov	r31, r25
 836:	96 e9       	ldi	r25, 0x96	; 150
 838:	bb 27       	eor	r27, r27
 83a:	93 95       	inc	r25
 83c:	f6 95       	lsr	r31
 83e:	87 95       	ror	r24
 840:	77 95       	ror	r23
 842:	67 95       	ror	r22
 844:	b7 95       	ror	r27
 846:	f1 11       	cpse	r31, r1
 848:	f8 cf       	rjmp	.-16     	; 0x83a <__floatsisf+0x1c>
 84a:	fa f4       	brpl	.+62     	; 0x88a <__stack+0x2b>
 84c:	bb 0f       	add	r27, r27
 84e:	11 f4       	brne	.+4      	; 0x854 <__floatsisf+0x36>
 850:	60 ff       	sbrs	r22, 0
 852:	1b c0       	rjmp	.+54     	; 0x88a <__stack+0x2b>
 854:	6f 5f       	subi	r22, 0xFF	; 255
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	16 c0       	rjmp	.+44     	; 0x88a <__stack+0x2b>
 85e:	88 23       	and	r24, r24
 860:	11 f0       	breq	.+4      	; 0x866 <__stack+0x7>
 862:	96 e9       	ldi	r25, 0x96	; 150
 864:	11 c0       	rjmp	.+34     	; 0x888 <__stack+0x29>
 866:	77 23       	and	r23, r23
 868:	21 f0       	breq	.+8      	; 0x872 <__stack+0x13>
 86a:	9e e8       	ldi	r25, 0x8E	; 142
 86c:	87 2f       	mov	r24, r23
 86e:	76 2f       	mov	r23, r22
 870:	05 c0       	rjmp	.+10     	; 0x87c <__stack+0x1d>
 872:	66 23       	and	r22, r22
 874:	71 f0       	breq	.+28     	; 0x892 <__stack+0x33>
 876:	96 e8       	ldi	r25, 0x86	; 134
 878:	86 2f       	mov	r24, r22
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	2a f0       	brmi	.+10     	; 0x88a <__stack+0x2b>
 880:	9a 95       	dec	r25
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	da f7       	brpl	.-10     	; 0x880 <__stack+0x21>
 88a:	88 0f       	add	r24, r24
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret

00000894 <__fp_inf>:
 894:	97 f9       	bld	r25, 7
 896:	9f 67       	ori	r25, 0x7F	; 127
 898:	80 e8       	ldi	r24, 0x80	; 128
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	08 95       	ret

000008a0 <__fp_nan>:
 8a0:	9f ef       	ldi	r25, 0xFF	; 255
 8a2:	80 ec       	ldi	r24, 0xC0	; 192
 8a4:	08 95       	ret

000008a6 <__fp_pscA>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	16 16       	cp	r1, r22
 8ac:	17 06       	cpc	r1, r23
 8ae:	18 06       	cpc	r1, r24
 8b0:	09 06       	cpc	r0, r25
 8b2:	08 95       	ret

000008b4 <__fp_pscB>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	14 06       	cpc	r1, r20
 8be:	05 06       	cpc	r0, r21
 8c0:	08 95       	ret

000008c2 <__fp_round>:
 8c2:	09 2e       	mov	r0, r25
 8c4:	03 94       	inc	r0
 8c6:	00 0c       	add	r0, r0
 8c8:	11 f4       	brne	.+4      	; 0x8ce <__fp_round+0xc>
 8ca:	88 23       	and	r24, r24
 8cc:	52 f0       	brmi	.+20     	; 0x8e2 <__fp_round+0x20>
 8ce:	bb 0f       	add	r27, r27
 8d0:	40 f4       	brcc	.+16     	; 0x8e2 <__fp_round+0x20>
 8d2:	bf 2b       	or	r27, r31
 8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0x18>
 8d6:	60 ff       	sbrs	r22, 0
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__fp_round+0x20>
 8da:	6f 5f       	subi	r22, 0xFF	; 255
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__fp_split3>:
 8e4:	57 fd       	sbrc	r21, 7
 8e6:	90 58       	subi	r25, 0x80	; 128
 8e8:	44 0f       	add	r20, r20
 8ea:	55 1f       	adc	r21, r21
 8ec:	59 f0       	breq	.+22     	; 0x904 <__fp_splitA+0x10>
 8ee:	5f 3f       	cpi	r21, 0xFF	; 255
 8f0:	71 f0       	breq	.+28     	; 0x90e <__fp_splitA+0x1a>
 8f2:	47 95       	ror	r20

000008f4 <__fp_splitA>:
 8f4:	88 0f       	add	r24, r24
 8f6:	97 fb       	bst	r25, 7
 8f8:	99 1f       	adc	r25, r25
 8fa:	61 f0       	breq	.+24     	; 0x914 <__fp_splitA+0x20>
 8fc:	9f 3f       	cpi	r25, 0xFF	; 255
 8fe:	79 f0       	breq	.+30     	; 0x91e <__fp_splitA+0x2a>
 900:	87 95       	ror	r24
 902:	08 95       	ret
 904:	12 16       	cp	r1, r18
 906:	13 06       	cpc	r1, r19
 908:	14 06       	cpc	r1, r20
 90a:	55 1f       	adc	r21, r21
 90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <__fp_split3+0xe>
 90e:	46 95       	lsr	r20
 910:	f1 df       	rcall	.-30     	; 0x8f4 <__fp_splitA>
 912:	08 c0       	rjmp	.+16     	; 0x924 <__fp_splitA+0x30>
 914:	16 16       	cp	r1, r22
 916:	17 06       	cpc	r1, r23
 918:	18 06       	cpc	r1, r24
 91a:	99 1f       	adc	r25, r25
 91c:	f1 cf       	rjmp	.-30     	; 0x900 <__fp_splitA+0xc>
 91e:	86 95       	lsr	r24
 920:	71 05       	cpc	r23, r1
 922:	61 05       	cpc	r22, r1
 924:	08 94       	sec
 926:	08 95       	ret

00000928 <__fp_zero>:
 928:	e8 94       	clt

0000092a <__fp_szero>:
 92a:	bb 27       	eor	r27, r27
 92c:	66 27       	eor	r22, r22
 92e:	77 27       	eor	r23, r23
 930:	cb 01       	movw	r24, r22
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__mulsf3>:
 936:	0e 94 ae 04 	call	0x95c	; 0x95c <__mulsf3x>
 93a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_round>
 93e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscA>
 942:	38 f0       	brcs	.+14     	; 0x952 <__mulsf3+0x1c>
 944:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscB>
 948:	20 f0       	brcs	.+8      	; 0x952 <__mulsf3+0x1c>
 94a:	95 23       	and	r25, r21
 94c:	11 f0       	breq	.+4      	; 0x952 <__mulsf3+0x1c>
 94e:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 952:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_nan>
 956:	11 24       	eor	r1, r1
 958:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>

0000095c <__mulsf3x>:
 95c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_split3>
 960:	70 f3       	brcs	.-36     	; 0x93e <__mulsf3+0x8>

00000962 <__mulsf3_pse>:
 962:	95 9f       	mul	r25, r21
 964:	c1 f3       	breq	.-16     	; 0x956 <__mulsf3+0x20>
 966:	95 0f       	add	r25, r21
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	55 1f       	adc	r21, r21
 96c:	62 9f       	mul	r22, r18
 96e:	f0 01       	movw	r30, r0
 970:	72 9f       	mul	r23, r18
 972:	bb 27       	eor	r27, r27
 974:	f0 0d       	add	r31, r0
 976:	b1 1d       	adc	r27, r1
 978:	63 9f       	mul	r22, r19
 97a:	aa 27       	eor	r26, r26
 97c:	f0 0d       	add	r31, r0
 97e:	b1 1d       	adc	r27, r1
 980:	aa 1f       	adc	r26, r26
 982:	64 9f       	mul	r22, r20
 984:	66 27       	eor	r22, r22
 986:	b0 0d       	add	r27, r0
 988:	a1 1d       	adc	r26, r1
 98a:	66 1f       	adc	r22, r22
 98c:	82 9f       	mul	r24, r18
 98e:	22 27       	eor	r18, r18
 990:	b0 0d       	add	r27, r0
 992:	a1 1d       	adc	r26, r1
 994:	62 1f       	adc	r22, r18
 996:	73 9f       	mul	r23, r19
 998:	b0 0d       	add	r27, r0
 99a:	a1 1d       	adc	r26, r1
 99c:	62 1f       	adc	r22, r18
 99e:	83 9f       	mul	r24, r19
 9a0:	a0 0d       	add	r26, r0
 9a2:	61 1d       	adc	r22, r1
 9a4:	22 1f       	adc	r18, r18
 9a6:	74 9f       	mul	r23, r20
 9a8:	33 27       	eor	r19, r19
 9aa:	a0 0d       	add	r26, r0
 9ac:	61 1d       	adc	r22, r1
 9ae:	23 1f       	adc	r18, r19
 9b0:	84 9f       	mul	r24, r20
 9b2:	60 0d       	add	r22, r0
 9b4:	21 1d       	adc	r18, r1
 9b6:	82 2f       	mov	r24, r18
 9b8:	76 2f       	mov	r23, r22
 9ba:	6a 2f       	mov	r22, r26
 9bc:	11 24       	eor	r1, r1
 9be:	9f 57       	subi	r25, 0x7F	; 127
 9c0:	50 40       	sbci	r21, 0x00	; 0
 9c2:	9a f0       	brmi	.+38     	; 0x9ea <__mulsf3_pse+0x88>
 9c4:	f1 f0       	breq	.+60     	; 0xa02 <__mulsf3_pse+0xa0>
 9c6:	88 23       	and	r24, r24
 9c8:	4a f0       	brmi	.+18     	; 0x9dc <__mulsf3_pse+0x7a>
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	bb 1f       	adc	r27, r27
 9d0:	66 1f       	adc	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	91 50       	subi	r25, 0x01	; 1
 9d8:	50 40       	sbci	r21, 0x00	; 0
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__mulsf3_pse+0x64>
 9dc:	9e 3f       	cpi	r25, 0xFE	; 254
 9de:	51 05       	cpc	r21, r1
 9e0:	80 f0       	brcs	.+32     	; 0xa02 <__mulsf3_pse+0xa0>
 9e2:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 9e6:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	e4 f3       	brlt	.-8      	; 0x9e6 <__mulsf3_pse+0x84>
 9ee:	98 3e       	cpi	r25, 0xE8	; 232
 9f0:	d4 f3       	brlt	.-12     	; 0x9e6 <__mulsf3_pse+0x84>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	e7 95       	ror	r30
 9fe:	9f 5f       	subi	r25, 0xFF	; 255
 a00:	c1 f7       	brne	.-16     	; 0x9f2 <__mulsf3_pse+0x90>
 a02:	fe 2b       	or	r31, r30
 a04:	88 0f       	add	r24, r24
 a06:	91 1d       	adc	r25, r1
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>
